/*
/*****************************************************************************
				GPUTejas Simulator
------------------------------------------------------------------------------------------------------------

   Copyright [2014] [Indian Institute of Technology, Delhi]
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
------------------------------------------------------------------------------------------------------------

	Contributors:  Seep Goel, Geetika Malhotra, Harinder Pal
*****************************************************************************/ 
/* Threads need to eat up the streams generated by the Emulator which
 * is being run through process.runtime. Just prints whatever it reads.
 * NOTE currently inputstream for pintool(and outputstream for java)
 * has not been constructed as we never needed it.
 * TODO should ideally implement a StreamWriter as well which can be used to pass
 * arguments to the executable or the PIN tool.
 */

package emulatorinterface.communication;

import java.io.*;

public class StreamGobbler implements Runnable {

	String name;	//Threads name (stdin or stderr)
	InputStream is;
	Thread thread;

	public StreamGobbler (String name, InputStream is) {
		this.name = name;
		this.is = is;
	}

	public void start () {
		thread = new Thread (this);
		thread.start ();
	}

	public void run () {
		try {
			InputStreamReader isr = new InputStreamReader (is);
			BufferedReader br = new BufferedReader (isr);

			while (true) {
				String s = br.readLine ();
				if (s == null) break;
				System.out.println("[" + name + "] " + s);
			}

			is.close ();

		} catch (Exception ex) {
			System.out.println("Problem reading stream " + name + "... :" + ex);
			ex.printStackTrace ();
		}
	}
	
	public void join() throws InterruptedException{
		thread.join();
	}
}